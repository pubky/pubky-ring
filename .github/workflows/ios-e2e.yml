name: iOS E2E Tests

on:
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      commit-sha:
        description: 'Commit SHA to test (leave empty to use current branch head)'
        required: false
        type: string

jobs:
  ios-e2e:
    runs-on: macos-latest
    concurrency:
      group: ios-e2e-${{ github.head_ref }}
      cancel-in-progress: true

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'yarn'

    - name: Optimize Resources
      run: |
        # Kill lingering xcodebuild processes
        sudo killall -9 xcodebuild || true
        # Kill lingering simulator processes
        sudo killall -9 Simulator || true
        sudo killall -9 com.apple.CoreSimulator.CoreSimulatorService || true
        # Disable Spotlight indexing to reduce CPU usage
        sudo mdutil -i off -a || true
        # Limit background services
        sudo launchctl unload -w /System/Library/LaunchDaemons/com.apple.metadata.mds.plist || true
        # Log resource usage for debugging
        top -l 1 -o mem | head -n 20
        sysctl hw.memsize hw.ncpu

    - name: Install dependencies
      run: yarn install --frozen-lockfile

    - name: Install Appium drivers
      run: yarn e2e:drivers

    - name: Install iOS dependencies
      run: |
        cd ios
        pod install

    - name: Wait for iOS Build
      id: wait-ios-build
      uses: ./.github/actions/wait-for-workflow
      with:
        workflow-name: 'iOS Build'
        commit-sha: 42029a047264ceff8f1f6eb92bcc153ddb07e553 # ${{ github.event.inputs.commit-sha || github.event.pull_request.head.sha || github.sha }}
        max-attempts: '360'  # 1 hour with 10s intervals

    - name: Download iOS App
      uses: dawidd6/action-download-artifact@v4
      with:
        name: ios-release-app
        path: ./artifacts
        workflow: ios-build.yml
        run_id: ${{ steps.wait-ios-build.outputs.workflow-run-id }}

    - name: Extract iOS App Bundle
      run: |
        cd artifacts
        unzip pubkyring.app.zip
        ls -la

    - name: Optimize Simulator Settings
      run: |
        defaults write com.apple.iphonesimulator ShowSingleTouches 1
        defaults write com.apple.iphonesimulator SlowAnimations -bool false
        defaults write com.apple.iphonesimulator DisableAutomaticLaunch -bool true
        # Reduce GPU usage
        defaults write com.apple.iphonesimulator GraphicsQualityOverride -int 1

    - name: Start iOS Simulator and Run E2E Tests
      run: |
        echo "=== Starting iOS E2E Test Setup ==="

        # List available simulators
        #echo "=== Available iOS Simulators ==="
        #xcrun simctl list devices

        # Boot the simulator
        echo "=== Booting iOS Simulator ==="
        xcrun simctl boot "iPhone 15" || echo "Simulator boot failed, trying to create..."

        # Wait for simulator to be ready
        echo "=== Waiting for Simulator to be Ready ==="
        xcrun simctl list devices | grep "iPhone 15" | grep "Booted" || {
          echo "Simulator not booted, attempting to boot again..."
          xcrun simctl shutdown "iPhone 15" || true
          sleep 5
          xcrun simctl boot "iPhone 15"
        }

        # Wait for simulator to be fully ready
        echo "=== Waiting for Simulator to be Fully Ready ==="
        sleep 15

                # Install the app
        echo "=== Installing iOS App ==="
        xcrun simctl install booted ./artifacts/pubkyring.app
        
        # Verify app installation
        echo "=== Verifying App Installation ==="
        xcrun simctl listapps booted | grep pubky || echo "No pubky apps found"
        
        # Grant permissions to the app
        echo "=== Granting App Permissions ==="
        xcrun simctl privacy booted grant camera com.pubkyring.app || true
        xcrun simctl privacy booted grant microphone com.pubkyring.app || true
        xcrun simctl privacy booted grant location com.pubkyring.app || true
        xcrun simctl privacy booted grant photos com.pubkyring.app || true
        
        # Clear any existing app data
        echo "=== Clearing App Data ==="
        xcrun simctl terminate booted com.pubkyring.app || true
        sleep 2

        # Set environment variables
        #export IOS_APP=./artifacts/pubkyring.app
        #export APPIUM_HOME=./e2e/.appium

        # Create artifacts directory for test recordings
        #echo "=== Creating Artefacts Directory ==="
        #mkdir -p ./e2e/artefacts

        # Start simulator log capture in background
        echo "=== Starting Simulator Log Capture ==="
        xcrun simctl spawn booted log stream --predicate 'process == "pubkyring"' > ios-simulator-logs.txt &
        LOG_PID=$!

        # Start Appium server manually for iOS
        echo "=== Starting Appium Server for iOS ==="
        APPIUM_HOME=./e2e/.appium npx appium --base-path /wd/hub &
        APPIUM_PID=$!
        sleep 10
        
        # Wait for Appium to be ready
        echo "=== Waiting for Appium Server ==="
        for i in {1..30}; do
          if curl -s http://127.0.0.1:4723/wd/hub/status > /dev/null; then
            echo "Appium server is ready!"
            break
          fi
          echo "Waiting for Appium server... (attempt $i/30)"
          sleep 2
        done

        # Wait a moment for app to be fully ready
        echo "=== Waiting 15 seconds for App to be Ready ==="
        sleep 15
        
        # Check simulator status and available apps
        echo "=== Simulator Status Check ==="
        xcrun simctl list devices | grep "iPhone 15"
        echo "=== Installed Apps ==="
        xcrun simctl listapps booted | head -10
        
        # Check if WDA is already installed
        echo "=== Checking for WDA ==="
        xcrun simctl listapps booted | grep -i webdriver || echo "WDA not found in app list"

        # Run E2E tests
        echo "=== Running E2E Tests ==="
        echo "=== WebDriverIO Configuration Debug ==="
        echo "APPIUM_HOME: $APPIUM_HOME"
        echo "IOS_APP: $IOS_APP"
        
        yarn e2e:ios

        # Stop log capture and Appium server
        echo "=== Stopping Log Capture ==="
        kill $LOG_PID || true
        echo "=== Stopping Appium Server ==="
        kill $APPIUM_PID || true

        # Exit with test result
        #exit ${TEST_EXIT_CODE:-0}

    - name: Upload Video
      uses: actions/upload-artifact@v4
      with:
        name: ios-e2e-video
        path: ./e2e/artefacts/
        retention-days: 7

    - name: Upload Logcat
      uses: actions/upload-artifact@v4
      with:
        name: ios-e2e-logcat
        path: ./logcat.txt
        retention-days: 7

    - name: Upload Simulator Logs
      uses: actions/upload-artifact@v4
      with:
        name: ios-e2e-simulator-logs
        path: ./ios-simulator-logs.txt
        retention-days: 7
    
    - name: Upload Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: ios-e2e-results
        path: |
          ./e2e/results/
        retention-days: 7
