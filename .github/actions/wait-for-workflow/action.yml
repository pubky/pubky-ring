name: 'Wait for Workflow'
description: 'Wait for a specific workflow to complete with configurable timeout'

inputs:
  workflow-name:
    description: 'Name of the workflow to wait for'
    required: true
  branch:
    description: 'Branch name to check (defaults to PR head ref)'
    required: false
    default: '${{ github.head_ref }}'
  max-attempts:
    description: 'Maximum number of attempts (default 360 = 1 hour with 10s intervals)'
    required: false
    default: '360'
  interval-seconds:
    description: 'Interval between checks in seconds (default 10)'
    required: false
    default: '10'

runs:
  using: 'composite'
  steps:
    - name: Wait for Workflow
      uses: actions/github-script@v7
      with:
        script: |
          const maxAttempts = parseInt('${{ inputs.max-attempts }}');
          const intervalSeconds = parseInt('${{ inputs.interval-seconds }}');
          const workflowName = '${{ inputs.workflow-name }}';
          const branch = '${{ inputs.branch }}';
          
          let attempts = 0;
          
          while (attempts < maxAttempts) {
            const runs = await github.rest.actions.listWorkflowRunsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: workflowName + '.yml',
              branch: branch,
              per_page: 1
            });
            
            if (runs.data.workflow_runs.length > 0) {
              const run = runs.data.workflow_runs[0];
              if (run.status === 'completed') {
                if (run.conclusion === 'success') {
                  console.log(`${workflowName} completed successfully`);
                  break;
                } else {
                  core.setFailed(`${workflowName} failed with conclusion: ${run.conclusion}`);
                }
              }
            }
            
            attempts++;
            if (attempts < maxAttempts) {
              console.log(`Waiting for ${workflowName}... (attempt ${attempts}/${maxAttempts})`);
              await new Promise(resolve => setTimeout(resolve, intervalSeconds * 1000));
            }
          }
          
          if (attempts >= maxAttempts) {
            core.setFailed(`${workflowName} did not complete within timeout (${maxAttempts * intervalSeconds / 60} minutes)`);
          }
